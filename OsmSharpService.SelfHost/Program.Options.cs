// OsmSharp - OpenStreetMap (OSM) SDK
// Copyright (C) 2013 Abelshausen Ben
//
// This file is part of OsmSharp.
//
// OsmSharp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// OsmSharp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OsmSharp. If not, see <http://www.gnu.org/licenses/>.

using CommandLine;
using CommandLine.Text;

namespace OsmSharpService.SelfHost
{
    /// <summary>
    /// Program containing the entry point of the application.
    /// </summary>
    partial class Program
    {
        /// <summary>
        /// Command Line options will be parsed.
        /// </summary>
        private sealed class Options
        {
            /// <summary>
            /// The filename.
            /// </summary>
            [Option('f', "file", Required = true, HelpText = "The OSM-file to load.")]
            public string File { get; set; }

            /// <summary>
            /// The hostname.
            /// </summary>
            [Option('h', "host", HelpText = "The hostname to host the service.")]
            public string Hostname { get; set; }

            /// <summary>
            /// The filename.
            /// </summary>
            [Option("type", HelpText = "The type routing to use.")]
            public string Type { get; set; }

            /// <summary>
            /// The hostname.
            /// </summary>
            [Option("format", HelpText = "The format of the serialized file.")]
            public string Format { get; set; }

            //
            // Marking a property of type IParserState with ParserStateAttribute allows you to
            // receive an instance of ParserState (that contains a IList<ParsingError>).
            // This is equivalent from inheriting from CommandLineOptionsBase (of previous versions)
            // with the advantage to not propagating a type of the library.
            //
            [ParserState]
            public IParserState LastParserState { get; set; }

            /// <summary>
            /// Returns the autogenerated usage description.
            /// </summary>
            /// <returns></returns>
            [HelpOption]
            public string GetUsage()
            {
                return HelpText.AutoBuild(this, current => HelpText.DefaultParsingErrorsHandler(this, current));
            }
        }
    }
}